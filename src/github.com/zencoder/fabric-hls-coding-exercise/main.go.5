package main

import (
	"bytes"
	"fmt"
	"net/http"
	"os"
	"encoding/json"
	"io/ioutil"
	"strconv"
)

var (
	port = "1337"
	ip = "localhost"
	simpleFilepath = "simple.json" // TODO
)

func main() {
	fmt.Println("Application started...")
	http.HandleFunc("/healthcheck", healthcheckHandler) 	
	http.HandleFunc("/metadata/simple", metadataHandler) 	
	http.HandleFunc("/duration/simple", durationHandler) 	
	http.HandleFunc("/manifest/simple/2s.m3u8", manifestHandler) 	
	http.ListenAndServe(ip + ":" + port, nil)
}

// -----------------

func healthcheckHandler(w http.ResponseWriter, r *http.Request) {
 	w.WriteHeader(http.StatusOK)
 	w.Write([]byte("Server is healthy"))
}

// -----------------

func metadataHandler(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	b := readFile(simpleFilepath)	
 	w.Write([]byte(b))
}

func readFile(filename string)  string{
  file, err := os.Open(filename)
  if err != nil {
    // handle the error here TODO
    return "error opening the file"
  }
  defer file.Close()

  // get the file size
  stat, err := file.Stat()
  if err != nil {
    return "error getting size"
  }
  // read the file
  bs := make([]byte, stat.Size())
  _, err = file.Read(bs)
  if err != nil {
    return "error reading the file 2"
  }

	s := string(bs)
  return s
}

// -- Task 4 -------------

func durationHandler(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(http.StatusOK)
	d := readMetadata(simpleFilepath)
	b := sumDuration(d)	
 	w.Write([]byte(strconv.Itoa(b)))
}

// https://mholt.github.io/json-to-go/
type DurationStruct struct {
	Atoms []struct {
		Duration int `json:"duration"`
	} `json:"atoms"`
}

func readMetadata(filepath string) DurationStruct {
    raw, err := ioutil.ReadFile(filepath)
    if err != nil {
        fmt.Println(err.Error())
        os.Exit(1)
    }
    var d DurationStruct
    json.Unmarshal(raw, &d)

	return d
}

func sumDuration(d DurationStruct) int {
	// sum the durations
    var sum=0 
	for _, thing := range d.Atoms {
		sum =  sum + thing.Duration
	}	
	return sum
}

// -- Task 5 ---------------

func manifestHandler(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/x-mpegURL")
	w.WriteHeader(http.StatusOK)
	var d = readMetadata(simpleFilepath)
	var m = makeManifest(d)
 	w.Write([]byte(m))
}

func makeManifest(d DurationStruct ) string {
	var buffer bytes.Buffer
	buffer.WriteString("#EXTM3U")
	buffer.WriteString("\n")
	buffer.WriteString("#EXT-X-VERSION:3")
	buffer.WriteString("\n")
	buffer.WriteString("#EXT-X-PLAYLIST-TYPE:VOD")
	buffer.WriteString("\n")
	buffer.WriteString("#EXT-X-MEDIA-SEQUENCE:1")
	buffer.WriteString("\n")
	buffer.WriteString("#EXT-X-TARGETDURATION:2")
	buffer.WriteString("\n")


	var i = 1
	for _, thing := range d.Atoms {
		buffer.WriteString("#EXTINF:")
 		//buffer.WriteString(strconv.Itoa(thing.Duration))
 		buffer.WriteString(strconv.FormatFloat(float64(thing.Duration) / float64(1000.0), 'f', -1, 64))
		buffer.WriteString(",")
		buffer.WriteString("\n")
		buffer.WriteString("http://example.com/simple/2s/")
		buffer.WriteString(strconv.Itoa(i))
		buffer.WriteString(".ts")
		buffer.WriteString("\n")
		i += 1
	}	

	buffer.WriteString("#EXT-X-ENDLIST")
	buffer.WriteString("\n")

	fmt.Println(buffer.String())
	return buffer.String()
}
